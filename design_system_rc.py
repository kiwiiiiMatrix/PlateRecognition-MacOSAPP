# -*- coding: utf-8 -*-

import math
import pathlib
folder = pathlib.Path(__file__).parent.resolve()

# Form implementation generated from reading ui file 'design_system.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import cv2
from PyQt5.QtGui import QPainter, QPen, QIcon
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QTableWidgetItem
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import  Qt,pyqtSlot
from PyQt5.QtChart import *
import os
import glob
from PyQt5 import uic
import argparse
from detect_plate import *
import copy
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
from sql_related import *



def resource_path(relative_path):
    """获取资源的绝对路径，适用于开发和打包后的应用"""
    if hasattr(sys, '_MEIPASS'):
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    else:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)
class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.timer_video = QtCore.QTimer()
        self.current_mode = 'image'
        # self.listWidget.currentChanged.connect(self.click_ListWidget)
        self.pushButton_2.setCheckable(True)
        self.pushButton_3.setCheckable(True)
        # self.pushButton_2.toggle()
        # self.pushButton_3.toggle()
        self.pushButton_2.setChecked(True)
        self.pushButton_3.setChecked(True)
        self.trigger_event()
        self.init_slots()
        self.cap = cv2.VideoCapture()
        self.out = None
        # 总车位
        self.all_park = 100
        self.free_time = float(self.lineEdit.text())
        self.cost_per_15m = float(self.lineEdit_2.text())
        self.top_cost = float(self.lineEdit_3.text())
        #数据库连接
        self.cur, self.db = db_connect()

        # self.out = cv2.VideoWriter('prediction.avi', cv2.VideoWriter_fourcc(*'XVID'), 20.0, (640, 480))
        # 用于记录识别历史
        self.recognition_counter = 0
        self.last_plate_result = None

        parser = argparse.ArgumentParser()
        parser.add_argument('--weights', nargs='+', type=str,
                            default=resource_path('weights/plate_detect_mps.pt'), help='model.pt path(s)')
        # file/folder, 0 for webcam
        parser.add_argument('--source', type=str,
                            default='data/images', help='source')
        parser.add_argument('--img-size', type=int,
                            default=640, help='inference size (pixels)')
        parser.add_argument('--conf-thres', type=float,
                            default=0.25, help='object confidence threshold')
        parser.add_argument('--iou-thres', type=float,
                            default=0.45, help='IOU threshold for NMS')
        # parser.add_argument('--device', default='0',
        #                     help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
        parser.add_argument('--device', default='mps')
        parser.add_argument(
            '--view-img', action='store_true', help='display results')
        parser.add_argument('--save-txt', action='store_true',
                            help='save results to *.txt')
        parser.add_argument('--save-conf', action='store_true',
                            help='save confidences in --save-txt labels')
        parser.add_argument('--nosave', action='store_true',
                            help='do not save images/videos')
        parser.add_argument('--classes', nargs='+', type=int,
                            help='filter by class: --class 0, or --class 0 2 3')
        parser.add_argument(
            '--agnostic-nms', action='store_true', help='class-agnostic NMS')
        parser.add_argument('--augment', action='store_true',
                            help='augmented inference')
        parser.add_argument('--update', action='store_true',
                            help='update all models')
        parser.add_argument('--project', default='result',
                            help='save results to project/name')
        parser.add_argument('--name', default='result',
                            help='save results to project/name')
        parser.add_argument('--exist-ok', action='store_true',
                            help='existing project/name ok, do not increment')
        self.opt = parser.parse_args()
        print(self.opt)

        source, weights, view_img, save_txt, imgsz = self.opt.source, self.opt.weights, self.opt.view_img, self.opt.save_txt, self.opt.img_size

        self.device = select_device(self.opt.device)
        self.half = self.device.type != 'cpu'  # half precision only supported on CUDA

        cudnn.benchmark = True
        # request_camera_permission()

    def list_button_set(self, index):
            # 点击不同的stack标签展示不同的页面
            self.listWidget.currentRowChanged.connect(self.stack_change)

    def stack_change(self, i):
            # 切换不同的页面
            self.stackedWidget.setCurrentIndex(i)

    def trigger_event(self):
            self.listWidget.currentRowChanged.connect(self.stack_change)
            self.listWidget.itemClicked.connect(self.list_button_set)
            pass
    def init_slots(self):
        self.pushButton.clicked.connect(self.button_image_open)
        # self.pushButton_2.clicked.connect(self.button_video_open)
        # self.pushButton_3.clicked.connect(self.button_camera_open)
        self.pushButton_2.clicked.connect(lambda checked: self.button_video_open(checked))
        self.pushButton_3.clicked.connect(lambda checked: self.button_camera_open(checked))
        print('初始化按钮')
        print('button2:', self.pushButton_2.isChecked(), 'button3:', self.pushButton_3.isChecked())
        self.timer_video.timeout.connect(self.show_video_frame_using_counter)
        self.pushButton_5.clicked.connect(self.show_table)
        self.pushButton_4.clicked.connect(self.modify_cost_rule)

    #修改计费规则模块
    def modify_cost_rule(self):
        self.free_time = float(self.lineEdit.text())
        self.cost_per_15m = float(self.lineEdit_2.text())
        self.top_cost = float(self.lineEdit_3.text())

    def show_table(self):
        result = show_all_data(self.cur)
        infos_count = len(result)
        self.tableWidget.setRowCount(infos_count)
        for i, row in enumerate(result):
            for j, info_item in enumerate(row):
                print(info_item)
                if type(info_item) == datetime.datetime:
                    new_item = QTableWidgetItem(info_item.strftime("%Y-%m-%d %H:%M:%S"))
                elif type(info_item) == float or type(info_item) == int or type(info_item) == bool:
                    new_item = QTableWidgetItem(str(info_item))
                else:
                    new_item = QTableWidgetItem(info_item)
                new_item.setTextAlignment(Qt.AlignHCenter)
                self.tableWidget.setItem(i, j, new_item)

    def data2database(self, plate_result, time):
        if self.radioButton.isChecked():
            insert_in(self.cur, self.db, plate_result, time)
        if self.radioButton_2.isChecked():
            #取出车牌号，如果车牌号从未出现过，跳信息框
            result = get_not_out(self.cur, plate_number=plate_result)
            if result == None:
                QMessageBox.information(self, "提示", "库中无信息")
                return
            if len(result) == 0:
                QMessageBox.information(self, "提示", "该车辆从未入库")
                # 用于视频及摄像头
                if (self.timer_video.isActive()):
                    self.timer_video.stop()
                    self.cap.release()
                    self.out.release()
                return -1, -1
            else: # 获取入库时间
                in_time = result[0][2]
                id = result[0][0]
            #计算价格
            delta = time - in_time
            days = delta.days
            hours = delta.seconds // 3600
            minutes = delta.seconds  % 3600 // 60
            seconds = delta.seconds % 60
            cost = self.calculate_cost(days, hours, minutes)
            insert_out(cur=self.cur, db=self.db, id=id, time=time, payment=cost)
            return cost, len(result)
            #插入信息
    def calculate_cost(self, days, hours, minutes):
        cost = 0
        if days == 0 and hours == 0 and minutes < self.free_time:
            return  cost
        if days == 0 and hours == 0 and minutes > self.free_time:
            cost = self.cost_per_15m * 2
        if days == 0 and hours > 0:
            cost = math.ceil(((hours * 60) + minutes) / 30) * self.cost_per_15m
        if days > 0:
            cost = (days * self.top_cost) + math.ceil(((hours * 60) + minutes) / 30) * self.cost_per_15m
        return cost
    def button_image_open(self):
        """
            处理图片按钮点击事件，进行图片加载、车牌检测和识别，并在GUI中显示结果。

            流程：
            1. 打开文件对话框选择图片文件。
            2. 检查是否选择了入库或出库选项。
            3. 加载检测模型和识别模型。
            4. 读取并处理选定的图片文件。
            5. 进行车牌检测和识别。
            6. 显示处理前后的图片。
            7. 获取车牌号并显示。
            8. 更新数据库记录，并显示剩余车位数。

            参数：
            self (object): 包含界面组件和模型的对象实例。

            返回：
            None
            """
        print('button_image_open')
        name_list = []

        # if self.current_mode == 'video' and self.timer_video.isActive():
        #     self.current_mode = 'image'
        #     self.stop_video_stream()
        #     self.pre_video.clear()
        #     self.pre_video_2.clear()
        #     print('停止读mp4视频！')
        #     self.pushButton_2.setText(u"视频检测")
        # elif self.current_mode == 'camera' and self.timer_video.isActive():
        #     self.current_mode = 'image'
        #     self.stop_camera_stream()
        #     self.pre_video.clear()
        #     self.pre_video_2.clear()
        #     print('停止摄像头检测！')
        #     self.pushButton_3.setText(u"摄像头检测")

        # self.current_mode = 'image'
        img_name, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "打开图片", "", "*.jpg;;*.png;;All Files(*)")
        if not img_name:
            return

        if not self.radioButton.isChecked() and not self.radioButton_2.isChecked():
            QMessageBox.information(self, "提示", "请先选择入库或出库！")
            return

        img_name_cp = img_name
        save_name = img_name.split('/')[-1]
        detect_model = load_model(self.opt.weights, self.device)  # 初始化检测模型
        plate_rec_model = init_model(self.device, resource_path('weights/plate_rec_color.pth'), is_color=True)  # 初始化识别模型
        # 算参数量
        total = sum(p.numel() for p in detect_model.parameters())
        total_1 = sum(p.numel() for p in plate_rec_model.parameters())
        print("detect params: %.2fM,rec params: %.2fM" % (total / 1e6, total_1 / 1e6))

        # plate_color_model =init_color_model(opt.color_model,device)
        time_all = 0
        time_begin = time.time()
        # print(count, img_name, end=" ")
        img = cv_imread(img_name)
        # resource_now = img
        if img.shape[-1] == 4:
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
        # detect_one(model,img_path,device)

        dict_list = detect_Recognition_plate(detect_model, img, self.device, plate_rec_model, self.opt.img_size,
                                             is_color=True)

        print("检测结果已运行")
        ori_img = draw_result(img, dict_list)
        print("绘制结果已运行")
        img_name = os.path.basename("result")
        showimg = ori_img
        save_img_path = "result"
        save_name = save_img_path + '/' + save_name
        cv2.imwrite(save_name, ori_img)
        # 处理前的
        resource_now = cv2.imread(img_name_cp)
        self.resource = cv2.cvtColor(resource_now, cv2.COLOR_BGR2BGRA)
        self.resource = cv2.resize(
            self.resource, (351, 317), interpolation=cv2.INTER_AREA)
        self.QtImg = QtGui.QImage(
            self.resource.data, self.resource.shape[1], self.resource.shape[0], QtGui.QImage.Format_RGB32)
        self.pre_video.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
        # 处理后的
        self.result = cv2.cvtColor(showimg, cv2.COLOR_BGR2BGRA)
        self.result = cv2.resize(
            self.result, (351, 371), interpolation=cv2.INTER_AREA)
        self.QtImg = QtGui.QImage(
            self.result.data, self.result.shape[1], self.result.shape[0], QtGui.QImage.Format_RGB32)
        self.pre_video_2.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
        print("已在GUI显示")


        # 获取车牌号
        if len(dict_list) == 0:
            self.label.setText("车牌识别结果： NULL")
            self.label_2.setText("NULL")
            self.label_3.setText("NULL")
            self.label_4.setText("NULL")
        else:
            plate_result = dict_list[0]['plate_no']
            self.label.setText("  车牌识别结果： " + plate_result)

            # 获取时间
            current_date = datetime.datetime.now()
            self.label_2.setText("  时间： " + current_date.strftime("%Y-%m-%d %H:%M:%S"))

            # 计费
            if self.radioButton.isChecked():  # 入库
                self.label_3.setText("  入库阶段,无需付款")
                self.data2database(plate_result, current_date)
            elif self.radioButton_2.isChecked():
                cost, parked = self.data2database(plate_result, current_date)
                if cost == -1 and parked == -1:
                    return
                self.label_3.setText("  需付款：" + str(cost))
            # 剩余车位
            result = not_out_all(self.cur)
            self.label_4.setText(" 剩余车位数为：" + str(self.all_park - len(result)))




    # def button_video_open(self):
    #     video_name, _ = QtWidgets.QFileDialog.getOpenFileName(
    #         self, "打开视频", "", "*.mp4;;*.avi;;All Files(*)")
    #
    #     if not video_name:
    #         return
    #
    #         # 确保之前的资源已释放
    #     if self.cap is not None:
    #         self.cap.release()
    #     if self.out is not None:
    #         self.out.release()
    #
    #     self.cap = cv2.VideoCapture(video_name)
    #     flag = self.cap.open(video_name)
    #     if flag == False:
    #         QtWidgets.QMessageBox.warning(
    #             self, u"Warning", u"打开视频失败", buttons=QtWidgets.QMessageBox.Ok,
    #             defaultButton=QtWidgets.QMessageBox.Ok)
    #     else:
    #         self.out = cv2.VideoWriter('prediction.avi', cv2.VideoWriter_fourcc(
    #             *'MJPG'), 20, (int(self.cap.get(3)), int(self.cap.get(4))))
    #         self.timer_video.start(30)
    #         self.pushButton.setDisabled(False)
    #         # self.pushButton.setDisabled(False)
    #         self.pushButton_2.setDisabled(False)
    #         # self.pushButton_3.setDisabled(True)
    #         self.pushButton_3.setDisabled(False)
    #
    #         # 先断开之前的连接
    #         try:
    #             self.pushButton.clicked.disconnect()
    #             self.pushButton_3.clicked.disconnect()
    #         except TypeError:
    #             pass  # 如果没有连接会抛出TypeError，忽略即可
    #
    #         # 重新连接点击事件
    #         self.pushButton.clicked.connect(self.button_image_open)
    #         self.pushButton_3.clicked.connect(self.button_camera_open)

    def button_video_open(self, checked):
        """
            处理视频按钮点击事件，进行视频加载、车牌检测和识别，并在GUI中显示结果。

            流程：
            1. 停止摄像头流（如果正在运行）。
            2. 检查按钮的选中状态，决定是否停止视频流。
            3. 打开文件对话框选择视频文件。
            4. 加载选定的视频文件，并初始化视频写入器。
            5. 处理视频帧，进行车牌检测和识别。
            6. 在GUI中显示处理结果。

            参数：
            self (object): 包含界面组件和模型的对象实例。
            checked (bool): 按钮的选中状态。

            返回：
            None
            """
        print('video button pushed')
        # if self.pushButton_3.isChecked():
        #     self.stop_camera_stream()
        # else:
        #     pass
        print('button2:', self.pushButton_2.isChecked(), 'button3:', self.pushButton_3.isChecked())
        if (not self.pushButton_3.isChecked()) and self.timer_video.isActive():
            self.stop_camera_stream()
        else:
            pass
        if checked:
            self.stop_video_stream()
            return
            # self.pushButton_2.setChecked(False)
        else:
            video_name, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "打开视频", "", "*.mp4;;*.avi;;All Files(*)")

            if not video_name:
                # self.pushButton_2.setChecked(False)
                return

            # 确保之前的资源已释放
            if self.cap is not None:
                self.cap.release()
            if self.out is not None:
                self.out.release()
            self.cap = cv2.VideoCapture(video_name)
            flag = self.cap.isOpened()
            if not flag:
                QtWidgets.QMessageBox.warning(
                    self, u"Warning", u"打开视频失败", buttons=QtWidgets.QMessageBox.Ok,
                    defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.out = cv2.VideoWriter('prediction.avi', cv2.VideoWriter_fourcc(
                    *'MJPG'), 20, (int(self.cap.get(3)), int(self.cap.get(4))))
                self.timer_video.start(30)
                self.pushButton.setDisabled(False)
                self.pushButton_2.setDisabled(False)
                self.pushButton_3.setDisabled(False)
                self.pushButton_2.setText(u"停止检测")
                # self.pushButton_2.setChecked(True)

                # 先断开之前的连接
                try:
                    self.pushButton.clicked.disconnect()
                    self.pushButton_3.clicked.disconnect()
                except TypeError:
                    pass  # 如果没有连接会抛出TypeError，忽略即可

                # 重新连接点击事件
                self.pushButton.clicked.connect(self.button_image_open)
                self.pushButton_3.clicked.connect(self.button_camera_open)

    def stop_video_stream(self):
        """
           停止视频流的处理函数。用于停止正在运行的视频流，释放资源，并更新GUI。

           流程：
           1. 停止定时器。
           2. 释放视频捕获和写入对象。
           3. 清除显示标签内容。
           4. 重置相关按钮状态。

           参数：
           self (object): 包含界面组件和模型的对象实例。

           返回：
           None
           """
        # self.pushButton_2.setChecked(False)
        self.pushButton_2.setText(u"视频识别")
        if self.timer_video.isActive():
            self.timer_video.stop()
            if self.cap is not None:
                self.cap.release()
            if self.out is not None:
                self.out.release()
            self.label.clear()
            print('视频流已停止并释放资源。')
            self.pre_video.clear()
            self.pre_video_2.clear()
            self.cap = None
            self.out = None
            self.pushButton_2.setDisabled(False)
            self.pushButton.setDisabled(False)
            # self.pushButton_2.setChecked(False)
            self.pushButton_2.setText(u"视频识别")
            self.pushButton_2.toggle()
            # self.init_slots()

    def stop_video_stream_cor(self):
        # self.pushButton_2.setChecked(False)
        self.pushButton_2.setText(u"视频识别")
        if self.timer_video.isActive():
            self.timer_video.stop()
            if self.cap is not None:
                self.cap.release()
            if self.out is not None:
                self.out.release()
            self.label.clear()
            print('视频流已停止并释放资源。')
            self.pre_video.clear()
            self.pre_video_2.clear()
            self.cap = None
            self.out = None
            self.pushButton_2.setDisabled(False)
            self.pushButton.setDisabled(False)
            # self.pushButton_2.setChecked(False)
            self.pushButton_2.setText(u"视频识别")
            # self.init_slots()

    def button_camera_open(self, checked):
        """
            打开摄像头按钮的处理函数。
            流程：
            1. 检查视频识别按钮是否处于选中状态，如果是，则停止视频流。
            2. 根据摄像头按钮的选中状态，执行相应的操作。
            3. 打开摄像头，并初始化相关资源。
            4. 处理摄像头打开失败的情况，并更新界面状态。

            参数：
            self (object): 包含界面组件和模型的对象实例。
            checked (bool): 表示摄像头按钮是否被选中。

            返回：
            None
            """
        print('camera button pushed')
        print('button2:', self.pushButton_2.isChecked(),'button3:',self.pushButton_3.isChecked())
        if self.pushButton_2.isChecked():
            self.stop_video_stream()
            # self.pushButton_2.setChecked(False)
        else:
            pass
        if checked:
            self.stop_camera_stream()
        else:
            # 确保 self.cap 已初始化
            if self.cap is None:
                self.cap = cv2.VideoCapture(0)
            else:
                self.cap.open(0)
            if not self.cap.isOpened():
                QtWidgets.QMessageBox.warning(
                    self, u"Warning", u"打开摄像头失败", buttons=QtWidgets.QMessageBox.Ok,
                    defaultButton=QtWidgets.QMessageBox.Ok)
                self.pushButton_3.setChecked(False)
            else:
                if not self.radioButton.isChecked() and not self.radioButton_2.isChecked():
                    QMessageBox.information(self, "提示", "请先选择入库或出库！")
                self.out = cv2.VideoWriter('prediction.avi', cv2.VideoWriter_fourcc(
                    *'MJPG'), 20, (int(self.cap.get(3)), int(self.cap.get(4))))
                self.timer_video.start(30)
                # self.pushButton_video.setDisabled(True)
                # self.pushButton_img.setDisabled(True)
                self.pushButton_2.setDisabled(False)
                self.pushButton.setDisabled(False)

                # self.pushButton_camera.setText(u"关闭摄像头")
                self.pushButton_3.setText(u"关闭摄像头")
                # self.pushButton_3.setChecked(True)
                # 先断开之前的连接
                try:
                    self.pushButton.clicked.disconnect(self.button_image_open)
                    self.pushButton_2.clicked.disconnect(self.button_video_open)
                except TypeError:
                    pass  # 如果没有连接会抛出TypeError，忽略即可

                    # 重新连接点击事件
                self.pushButton.clicked.connect(self.button_image_open)
                self.pushButton_2.clicked.connect(self.button_video_open)


    def stop_camera_stream(self):
        """
            停止摄像头流并释放相关资源的函数。
            流程：
            1. 更新摄像头按钮的文本。
            2. 检查定时器是否处于活动状态，如果是，则停止定时器。
            3. 释放摄像头和输出流资源。
            4. 清除标签和视频显示区域。
            5. 更新界面按钮状态。

            参数：
            self (object): 包含界面组件和模型的对象实例。

            返回：
            None
            """
        # self.pushButton_3.setChecked(False)
        self.pushButton_3.setText(u"实时识别")
        # self.pushButton_3.setText(u"实时识别")
        if self.timer_video.isActive():
            self.timer_video.stop()
            if self.cap is not None:
                self.cap.release()
                print('Releasing camera')
            if self.out is not None:
                self.out.release()
                print('Releasing output stream')
            self.label.clear()
            self.cap = None
            self.out = None
            print('摄像头检测已停止并释放资源。')
            self.pre_video.clear()
            self.pre_video_2.clear()
            self.pushButton_2.setDisabled(False)
            self.pushButton.setDisabled(False)
            self.pushButton_3.setChecked(False)
            self.pushButton_3.setText(u"实时识别")
            # self.init_slots()

    def stop_camera_stream_cor(self):
        # self.pushButton_3.setChecked(False)
        self.pushButton_3.setText(u"实时识别")
        # self.pushButton_3.setText(u"实时识别")
        if self.timer_video.isActive():
            self.timer_video.stop()
            if self.cap is not None:
                self.cap.release()
                print('Releasing camera')
            if self.out is not None:
                self.out.release()
                print('Releasing output stream')
            # self.label.clear()
            self.cap = None
            self.out = None
            print('摄像头检测已停止并释放资源。')
            # self.pre_video.clear()
            # self.pre_video_2.clear()
            self.pushButton_2.setDisabled(False)
            self.pushButton.setDisabled(False)
            self.pushButton_3.toggle()
            self.pushButton_3.setText(u"实时识别")
            # self.init_slots()

    def show_video_frame(self):
        name_list = []


        flag, img = self.cap.read()
        if img is not None:
            showimg = img
            detect_model = load_model(self.opt.weights, self.device)  # 初始化检测模型
            plate_rec_model = init_model(self.device, resource_path('weights/plate_rec_color.pth'), is_color=True)  # 初始化识别模型
            # 算参数量
            total = sum(p.numel() for p in detect_model.parameters())
            total_1 = sum(p.numel() for p in plate_rec_model.parameters())
            print("detect params: %.2fM,rec params: %.2fM" % (total / 1e6, total_1 / 1e6))

            # plate_color_model =init_color_model(opt.color_model,device)
            time_all = 0
            time_begin = time.time()
            # print(count, img_name, end=" ")
            # 记录每一帧
            img_copy = copy.deepcopy(img)
            if img.shape[-1] == 4:
                img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
            # detect_one(model,img_path,device)
            dict_list = detect_Recognition_plate(detect_model, img, self.device, plate_rec_model, self.opt.img_size,
                                                 is_color=True)


            print("检测结果已运行")
            ori_img = draw_result(img, dict_list)
            print("绘制结果已运行")
            # img_name = os.path.basename("result")
            showimg = ori_img
            # save_img_path = "result"
            # save_name = save_img_path + '/' + save_name
            # cv2.imwrite(save_name, ori_img)
            # 处理前
            self.resource = cv2.cvtColor(img_copy, cv2.COLOR_BGR2BGRA)
            self.resource = cv2.resize(
                self.resource, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(
                self.resource.data, self.resource.shape[1], self.resource.shape[0], QtGui.QImage.Format_RGB32)
            self.pre_video.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
            # 处理后
            self.result = cv2.cvtColor(showimg, cv2.COLOR_BGR2BGRA)
            self.result = cv2.resize(
                self.result, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(
                self.result.data, self.result.shape[1], self.result.shape[0], QtGui.QImage.Format_RGB32)
            self.pre_video_2.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
            print("已在GUI显示")


            # 获取车牌号
            if  len(dict_list) == 0:
                self.label.setText("车牌识别结果： NULL")
                self.label_2.setText("NULL")
                self.label_3.setText("NULL")
                self.label_4.setText("NULL")
            else:
                plate_result = dict_list[0]['plate_no']
                self.label.setText("  车牌识别结果： " + plate_result)

                # 获取时间
                current_date = datetime.datetime.now()
                self.label_2.setText("  进入时间： " + current_date.strftime("%Y-%m-%d %H:%M:%S"))

                # 计费
                if self.radioButton.isChecked():  # 入库
                    self.label_3.setText("  入库阶段,无需付款")
                elif self.radioButton_2.isChecked():
                    self.label_3.setText("  需付款： 100元")


    def show_video_frame_rec(self):
        """
            显示视频帧并进行车牌识别的函数。
            功能：
            - 从视频流中读取帧，并对其进行车牌检测和识别。
            - 在GUI中显示处理前和处理后的图像。
            - 连续五次识别到相同的车牌时，停止视频流并释放相关资源，同时将识别结果写入数据库。

            参数：
            self (object): 包含界面组件和模型的对象实例。

            返回：
            None
        """
        name_list = []
        # if not self.radioButton.isChecked() and not self.radioButton_2.isChecked():
        #     QMessageBox.information(self, "提示", "请先选择入库或出库！")
        #     return

        flag, img = self.cap.read()
        if img is not None:
            detect_model = load_model(self.opt.weights, self.device)  # 初始化检测模型
            plate_rec_model = init_model(self.device, resource_path('weights/plate_rec_color.pth'),
                                         is_color=True)  # 初始化识别模型
            # 算参数量
            total = sum(p.numel() for p in detect_model.parameters())
            total_1 = sum(p.numel() for p in plate_rec_model.parameters())
            print("detect params: %.2fM, rec params: %.2fM" % (total / 1e6, total_1 / 1e6))

            img_copy = copy.deepcopy(img)
            if img.shape[-1] == 4:
                img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

            dict_list = detect_Recognition_plate(detect_model, img, self.device, plate_rec_model,
                                                 self.opt.img_size, is_color=True)

            print("检测结果已运行")
            ori_img = draw_result(img, dict_list)
            print("绘制结果已运行")


            # 处理前
            self.resource = cv2.cvtColor(img_copy, cv2.COLOR_BGR2BGRA)
            self.resource = cv2.resize(self.resource, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(self.resource.data, self.resource.shape[1], self.resource.shape[0],
                                      QtGui.QImage.Format_RGB32)
            self.pre_video.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))

            # 处理后
            self.result = cv2.cvtColor(ori_img, cv2.COLOR_BGR2BGRA)
            self.result = cv2.resize(self.result, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(self.result.data, self.result.shape[1], self.result.shape[0],
                                      QtGui.QImage.Format_RGB32)
            self.pre_video_2.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
            print("已在GUI显示")

            # 获取车牌号
            if len(dict_list) == 0:
                self.recognition_counter = 0  # 重置计数器
                self.last_plate_result = None
                self.label.setText("车牌识别结果： NULL")
                self.label_2.setText("NULL")
                self.label_3.setText("NULL")
                self.label_4.setText("NULL")
            else:
                plate_result = dict_list[0]['plate_no']
                self.label.setText("  车牌识别结果： " + plate_result)

                # 获取时间
                current_date = datetime.datetime.now()
                self.label_2.setText("  时间： " + current_date.strftime("%Y-%m-%d %H:%M:%S"))

                # 计费
                if self.radioButton.isChecked():  # 入库
                    self.label_3.setText("  入库阶段,无需付款")
                    self.data2database(plate_result, current_date)
                elif self.radioButton_2.isChecked():
                    cost, parked = self.data2database(plate_result, current_date)
                    if cost == -1 and parked == -1:
                        return
                    self.label_3.setText("  需付款：" + str(cost))
                # 剩余车位
                result = not_out_all(self.cur)
                self.label_4.setText(" 剩余车位数为：" + str(self.all_park - len(result)))
                self.timer_video.stop()
                self.cap.release()
                self.out.release()
                # if self.pushButton_3.isChecked():
                #     # 停止视频流
                #     self.stop_camera_stream_cor()
                #
                # if self.pushButton_2.isChecked():
                #     self.stop_video_stream_cor()

                # 剩余车位

    def show_video_frame_using_counter(self):
        name_list = []
        flag, img = self.cap.read()
        if img is not None:
            detect_model = load_model(self.opt.weights, self.device)  # 初始化检测模型
            plate_rec_model = init_model(self.device, resource_path('weights/plate_rec_color.pth'),
                                         is_color=True)  # 初始化识别模型
            # 算参数量
            total = sum(p.numel() for p in detect_model.parameters())
            total_1 = sum(p.numel() for p in plate_rec_model.parameters())
            print("detect params: %.2fM, rec params: %.2fM" % (total / 1e6, total_1 / 1e6))

            img_copy = copy.deepcopy(img)
            if img.shape[-1] == 4:
                img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

            dict_list = detect_Recognition_plate(detect_model, img, self.device, plate_rec_model,
                                                 self.opt.img_size, is_color=True)

            print("检测结果已运行")
            ori_img = draw_result(img, dict_list)
            print("绘制结果已运行")

            # 处理前
            self.resource = cv2.cvtColor(img_copy, cv2.COLOR_BGR2BGRA)
            self.resource = cv2.resize(self.resource, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(self.resource.data, self.resource.shape[1], self.resource.shape[0],
                                      QtGui.QImage.Format_RGB32)
            self.pre_video.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))

            # 处理后
            self.result = cv2.cvtColor(ori_img, cv2.COLOR_BGR2BGRA)
            self.result = cv2.resize(self.result, (351, 371), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(self.result.data, self.result.shape[1], self.result.shape[0],
                                      QtGui.QImage.Format_RGB32)
            self.pre_video_2.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
            print("已在GUI显示")

            # 获取车牌号
            if len(dict_list) == 0:
                self.recognition_counter = 0  # 重置计数器
                self.last_plate_result = None
                self.label.setText("车牌识别结果： NULL")
                self.label_2.setText("NULL")
                self.label_3.setText("NULL")
                self.label_4.setText("NULL")
            else:
                plate_result = dict_list[0]['plate_no']
                if len(plate_result)==7:
                    # 检查是否连续五次识别到相同的车牌
                    if plate_result == self.last_plate_result:
                        self.recognition_counter += 1
                    else:
                        self.recognition_counter = 1
                        self.last_plate_result = plate_result

                    if self.recognition_counter >= 5:
                        self.label.setText("  车牌识别结果： " + plate_result)
                        # 获取时间
                        current_date = datetime.datetime.now()
                        self.label_2.setText("  时间： " + current_date.strftime("%Y-%m-%d %H:%M:%S"))

                        # 计费
                        if self.radioButton.isChecked():  # 入库
                            self.label_3.setText("  入库阶段,无需付款")
                            self.data2database(plate_result, current_date)
                        elif self.radioButton_2.isChecked():
                            cost, parked = self.data2database(plate_result, current_date)
                            if cost == -1 and parked == -1:
                                return
                            self.label_3.setText("  需付款：" + str(cost))
                        # 剩余车位
                        result = not_out_all(self.cur)
                        self.label_4.setText(" 剩余车位数为：" + str(self.all_park - len(result)))

                        # 停止视频流并释放资源
                        self.timer_video.stop()
                        self.cap.release()
                        self.out.release()
                        print("识别到相同车牌5次，停止识别并写入数据库。")
                        self.recognition_counter = 0  # 重置计数器
                        self.last_plate_result = None
                    else:
                        self.label.setText("车牌识别结果： NULL")
                        self.label_2.setText("NULL")
                        self.label_3.setText("NULL")
                        self.label_4.setText("NULL")
                else:
                    self.recognition_counter = 0  # 重置计数器
                    self.last_plate_result = None
                    self.label.setText("车牌识别结果： NULL")
                    self.label_2.setText("NULL")
                    self.label_3.setText("NULL")
                    self.label_4.setText("NULL")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1289, 734)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("QFrame#frame{\n"
"    background-color: qlineargradient(x0:0, y0:1, x1:1, y1:1,stop:0.4  rgb(107, 128, 210), stop:1 rgb(180, 140, 255));\n"
"border:0px solid red;\n"
"border-radius:30px\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setStyleSheet("QFrame{\n"
"    background-color: rgba(255, 255, 255,0);\n"
"border:0px solid red;\n"
"border-radius:30px\n"
"}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(12)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout.setContentsMargins(12, 12, 12, 12)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.widget_2 = QtWidgets.QWidget(self.frame_4)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_3.setContentsMargins(0, 12, 0, 8)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.widget = QtWidgets.QWidget(self.widget_2)
        self.widget.setMinimumSize(QtCore.QSize(64, 64))
        self.widget.setMaximumSize(QtCore.QSize(64, 64))
        icon_path = folder/'img'/'img'/'image.png'
        self.widget.setStyleSheet(f"image: url({str(icon_path)});\n"
                                  "border:3px solid rgb(255, 255, 255);\n"
                                  "border-radius:32px")
#         self.widget.setStyleSheet("image: url(img/img/image.png);\n"
# "border:3px solid rgb(255, 255, 255);\n"
# "\n"
# "border-radius:32px")
        self.widget.setObjectName("widget")
        self.horizontalLayout_3.addWidget(self.widget)
        self.verticalLayout.addWidget(self.widget_2)
        self.frame_5 = QtWidgets.QFrame(self.frame_4)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.comboBox = QtWidgets.QComboBox(self.frame_5)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 40))
        self.comboBox.setMaximumSize(QtCore.QSize(130, 16777215))
        icon_path_2 = folder/'img'/'buttom_white'/'下拉列表_drop-down-list.svg'
        self.comboBox.setStyleSheet(f"""
        QComboBox {{
            background-color: rgba(255, 255, 255, 0);
            color: rgb(255, 255, 255);
            text-align:center;
        }}
        QComboBox::drop-down {{
            image: url({str(icon_path_2)});
            width:30px;
        }}
        QComboBox:on {{
            color: rgb(25, 95, 254);
            gridline-color: rgb(64, 53, 255);
        }}
        QComboBox:off {{
            color:  rgb(0, 0, 0);
        }}
        """)
#         self.comboBox.setStyleSheet("\n"
# "\n"
# "QComboBox{\n"
# "background-color: rgba(255, 255, 255, 0);\n"
# "    color: rgb(255, 255, 255);\n"
# "text-align:center;\n"
# "}\n"
# "QComboBox::drop-down{\n"
# "    \n"
# "    image: url(img/buttom_white/下拉列表_drop-down-list.svg);\n"
# "    width:30px;\n"
# "}\n"
# "\n"
# "QComboBox:on{\n"
# "    color: rgb(25, 95, 254);\n"
# "    gridline-color: rgb(64, 53, 255);\n"
# "}\n"
# "QComboBox:off{\n"
# "    color:  rgb(0, 0, 0);\n"
# "}")
        self.comboBox.setEditable(False)
        self.comboBox.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        self.comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.comboBox.setDuplicatesEnabled(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.comboBox)
        self.verticalLayout.addWidget(self.frame_5)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.listWidget = QtWidgets.QListWidget(self.frame_3)
        self.listWidget.setStyleSheet("QListView {\n"
"\n"
"}\n"
"QListView::item{\n"
"background-color: transparent;\n"
"    color: rgba(255, 255, 255, 199);\n"
"padding:12px;\n"
"padding-left:18px;\n"
"}\n"
"QListView::item:hover {\n"
"    background-color: rgba(175, 139, 255, 59);\n"
"\n"
"}\n"
"QListView::item:selected {\n"
"background-color: rgba(175, 139, 255, 159);\n"
"    color: rgb(255, 255, 255);\n"
"border-left:5px solid rgb(172, 154, 233)\n"
"}\n"
"")
        i_path_1 = folder/'img'/'buttom_white'/'首页_home-two.svg'
        i_path_2 = folder/'img'/'buttom_white'/'文字讯息_text-message.svg'
        i_path_3 = folder/'img'/'buttom_white'/'日历_calendar.svg'
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        icon = QtGui.QIcon()
        # icon.addPixmap(QtGui.QPixmap("img/buttom_white/首页_home-two.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap(str(i_path_1)), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item.setIcon(icon)
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        icon1 = QtGui.QIcon()
        # icon1.addPixmap(QtGui.QPixmap("img/buttom_white/文字讯息_text-message.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap(str(i_path_2)), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item.setIcon(icon1)
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        icon2 = QtGui.QIcon()
        # icon2.addPixmap(QtGui.QPixmap("img/buttom_white/日历_calendar.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap(str(i_path_3)), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        item.setIcon(icon2)
        self.listWidget.addItem(item)
        self.verticalLayout_2.addWidget(self.listWidget)
        self.verticalLayout_2.setStretch(0, 1)
        self.verticalLayout_2.setStretch(1, 2)
        self.horizontalLayout_2.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setStyleSheet("QFrame{\n"
"    background-color: rgb(245, 249, 254);\n"
"border:0px solid red;\n"
"border-radius:30px\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_30.setContentsMargins(48, 24, 48, 24)
        self.verticalLayout_30.setSpacing(4)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_2)
        self.stackedWidget.setStyleSheet("background-color: rgb(238, 242, 255);\n"
"border:2px solid rgb(255, 255, 255);\n"
"border-radius:15px")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.frame_6 = QtWidgets.QFrame(self.page)
        self.frame_6.setGeometry(QtCore.QRect(750, 20, 141, 631))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_6)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 320, 120, 65))
        self.pushButton_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(243, 175, 189),  stop:1 rgb(155, 118, 218));\n"
"border: 1px outset rgb(153, 117, 219)")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_6)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 460, 120, 65))
        self.pushButton_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(162, 129, 247),  stop:1 rgb(119, 111, 252));\n"
"border: 1px outset rgb(98, 91, 213)")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton = QtWidgets.QPushButton(self.frame_6)
        self.pushButton.setGeometry(QtCore.QRect(10, 180, 120, 65))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(162, 129, 247),  stop:1 rgb(119, 111, 252));\n"
"border: 1px outset rgb(98, 91, 213)\n"
"}\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.radioButton = QtWidgets.QRadioButton(self.frame_6)
        self.radioButton.setGeometry(QtCore.QRect(30, 70, 91, 21))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.frame_6)
        self.radioButton_2.setGeometry(QtCore.QRect(30, 90, 91, 21))
        self.radioButton_2.setObjectName("radioButton_2")
        self.pre_video = QtWidgets.QLabel(self.page)
        self.pre_video.setGeometry(QtCore.QRect(20, 40, 351, 371))
        self.pre_video.setMinimumSize(QtCore.QSize(200, 100))
        self.pre_video.setStyleSheet("background-color: rgb(238, 242, 255);\n"
"border:2px solid rgb(255, 255, 255);\n"
"border-radius:15px")
        self.pre_video.setText("")
        self.pre_video.setAlignment(QtCore.Qt.AlignCenter)
        self.pre_video.setObjectName("pre_video")
        self.pre_video_2 = QtWidgets.QLabel(self.page)
        self.pre_video_2.setGeometry(QtCore.QRect(380, 40, 351, 371))
        self.pre_video_2.setMinimumSize(QtCore.QSize(200, 100))
        self.pre_video_2.setStyleSheet("background-color: rgb(238, 242, 255);\n"
"border:2px solid rgb(255, 255, 255);\n"
"border-radius:15px")
        self.pre_video_2.setText("")
        self.pre_video_2.setAlignment(QtCore.Qt.AlignCenter)
        self.pre_video_2.setObjectName("pre_video_2")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(40, 450, 291, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.page)
        self.label_2.setGeometry(QtCore.QRect(420, 450, 291, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.page)
        self.label_3.setGeometry(QtCore.QRect(40, 560, 291, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.page)
        self.label_4.setGeometry(QtCore.QRect(420, 560, 291, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.tableWidget = QtWidgets.QTableWidget(self.page_2)
        self.tableWidget.setGeometry(QtCore.QRect(90, 100, 661, 381))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.label_5 = QtWidgets.QLabel(self.page_2)
        self.label_5.setGeometry(QtCore.QRect(370, 20, 140, 65))
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(162, 129, 247),  stop:1 rgb(119, 111, 252));\n"
"border: 1px outset rgb(98, 91, 213)")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.pushButton_5 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_5.setGeometry(QtCore.QRect(380, 530, 120, 65))
        self.pushButton_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(243, 175, 189),  stop:1 rgb(155, 118, 218));\n"
"border: 1px outset rgb(153, 117, 219)")
        self.pushButton_5.setObjectName("pushButton_5")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_6 = QtWidgets.QLabel(self.page_3)
        self.label_6.setGeometry(QtCore.QRect(370, 40, 140, 65))
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(162, 129, 247),  stop:1 rgb(119, 111, 252));\n"
"border: 1px outset rgb(98, 91, 213)")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.page_3)
        self.label_7.setGeometry(QtCore.QRect(160, 180, 161, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.page_3)
        self.label_8.setGeometry(QtCore.QRect(160, 290, 161, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.page_3)
        self.label_9.setGeometry(QtCore.QRect(160, 390, 161, 71))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.pushButton_4 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_4.setGeometry(QtCore.QRect(390, 520, 120, 65))
        self.pushButton_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"border-radius: 15px;\n"
"background-color: qradialgradient(cx:0, cy:0, radius:1, fx:0.1, fy:0.1, stop:0 rgb(243, 175, 189),  stop:1 rgb(155, 118, 218));\n"
"border: 1px outset rgb(153, 117, 219)")
        self.pushButton_4.setObjectName("pushButton_4")
        self.lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit.setGeometry(QtCore.QRect(400, 180, 360, 70))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(400, 290, 360, 70))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_3.setGeometry(QtCore.QRect(400, 390, 360, 70))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.stackedWidget.addWidget(self.page_3)
        self.verticalLayout_30.addWidget(self.stackedWidget)
        self.horizontalLayout_2.addWidget(self.frame_2)
        self.horizontalLayout_2.setStretch(1, 1)
        self.verticalLayout_3.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "车牌识别计费系统"))
        MainWindow.setWindowIcon(QIcon("img/img/image.png"))
        self.comboBox.setItemText(0, _translate("MainWindow", "yuze's Homework"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("MainWindow", "识别程序"))
        item = self.listWidget.item(1)
        item.setText(_translate("MainWindow", "车牌记录管理"))
        item = self.listWidget.item(2)
        item.setText(_translate("MainWindow", "收费标准管理"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton_2.setText(_translate("MainWindow", "视频识别"))
        self.pushButton_3.setText(_translate("MainWindow", "实时识别"))
        self.pushButton.setText(_translate("MainWindow", "图像识别"))
        self.radioButton.setText(_translate("MainWindow", "进入车库"))
        self.radioButton_2.setText(_translate("MainWindow", "离开车库"))
        self.label.setText(_translate("MainWindow", "  车牌识别结果："))
        self.label_2.setText(_translate("MainWindow", "  进入时间："))
        self.label_3.setText(_translate("MainWindow", "  需付款："))
        self.label_4.setText(_translate("MainWindow", "  剩余车位数为："))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "车牌号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "进入时间"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "离开时间"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "支付金额"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "是否支付(0:未)"))
        self.label_5.setText(_translate("MainWindow", "车牌记录管理"))
        self.pushButton_5.setText(_translate("MainWindow", "刷新"))
        self.label_6.setText(_translate("MainWindow", "收费标准管理"))
        self.label_7.setText(_translate("MainWindow", "免费停车时长(分钟)："))
        self.label_8.setText(_translate("MainWindow", "基本费用(XX元/30分钟)："))
        self.label_9.setText(_translate("MainWindow", "每天最高限价(元)："))
        self.pushButton_4.setText(_translate("MainWindow", "确认修改"))
        self.lineEdit.setText(_translate("MainWindow", "30"))
        self.lineEdit_2.setText(_translate("MainWindow", "1.5"))
        self.lineEdit_3.setText(_translate("MainWindow", "50"))
if __name__ == '__main__':
    # import sys
    # app = QtWidgets.QApplication([])
    # ui = Ui_MainWindow()
    # window = SE()
    # app.exec_()
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())

